{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\n//keyword - constant and immutable those variables cannot be changed and gas fees will be smaller\r\n\r\n//error NotOwner(); //Custom errors, those makes gas fees smaller, cause instead of keeping an error string in the memory\r\n// we simply store a variable of error\r\n\r\ncontract FundMe {\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\r\n    using PriceConverter for uint256;\r\n\r\n    AggregatorV3Interface private sPriceFeed;\r\n\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    address public immutable iOwner;\r\n\r\n    constructor(address priceFeed) {\r\n        //called when we deploy this contract\r\n        iOwner = msg.sender;\r\n        sPriceFeed = AggregatorV3Interface(priceFeed);\r\n    }\r\n\r\n    function fund() public payable {\r\n        //Smart contract can hold funds same as wallets\r\n        require(\r\n            msg.value.getConversionRate(sPriceFeed) >= MINIMUM_USD,\r\n            \"Did not send enough!\"\r\n        ); //1 parametr = X => vykonani druheho parametru, a zaroven se prerusi transakce\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 founderIndex = 0;\r\n            founderIndex < funders.length;\r\n            founderIndex++\r\n        ) {\r\n            //nulovani mapy\r\n            address addressFounder = funders[founderIndex];\r\n            addressToAmountFunded[addressFounder] = 0;\r\n        }\r\n\r\n        funders = new address[](0); //reseting array\r\n        //call\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed!\");\r\n\r\n        /*//transfer\r\n        payable(msg.sender).transfer(address(this).balance);\r\n\r\n        //send\r\n        bool success = payable(msg.sender).send(address(this).balance);\r\n        require(success, \"Too much gas fee! Send failed!\");*/\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == iOwner, \"You cant't withdraw !\");\r\n        /*if(msg.sender != i_owner){\r\n            revert NotOwner();\r\n        }*/\r\n        _; //the underscore means when will the rest of the code happen\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    // 1000000000\r\n    // call it get fiatConversionRate, since it assumes something about decimals\r\n    // It wouldn't work for every aggregator\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}